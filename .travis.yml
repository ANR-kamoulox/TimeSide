language: python
python:
  - "2.7"

virtualenv:
  system_site_packages: true

env:
  - TEST_TARGET=default  # Default unit test
  - TEST_TARGET=cli      # Test for TimeSide command line interfaces
  - TEST_TARGET=doc      # Test documentation and included doctest
  - TEST_TARGET=server   # Test timeside.server


# command to prepare the system to install prerequisites or dependencies
before_install:
  - sudo add-apt-repository -y ppa:donk/gstreamer
  - sudo apt-get -qq update
  - export DEBIAN_PACKAGES=$(egrep -v "^\s*(#|$)" debian-requirements.txt)
  - sudo apt-get install -qq $DEBIAN_PACKAGES

# Install conda
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
# Useful for debugging any issues with conda
  - conda info -a
# Install binary and pip dependencies with conda
  - conva config --add channel piem 
  - conda env create --name app --file environment-pinned.yml
  - source activate app

# Install TimeSide
install:
  #- pip install --upgrade pip
  #- pip install -r requirements.txt
  - pip install .


# command to run tests
before_script:
  # -------------DEFAULT--------------------
  - if [[ $TEST_TARGET == 'default' ]]; then
       pip install coverage;
    fi
  # -------------DOC------------------------
  - if [[ $TEST_TARGET == 'doc' ]]; then
       pip install sphinx numpydoc;
    fi


script:
  #
  # -------------DEFAULT--------------------
  - if [[ $TEST_TARGET == 'default' ]]; then
       coverage run --source=timeside --omit=timeside/plugins/analyzer/external/yaafe.py setup.py test;
    fi
  # -------------DOC------------------------
  - if [[ $TEST_TARGET == 'doc' ]]; then
       cd doc;
       make html;
       make doctest;
       cd ..;
    fi
  # -------------CLI-------------------------
  - if [[ $TEST_TARGET == 'cli' ]]; then
       ./tests/test_scripts.sh;
    fi
  # -------------SERVER-------------------------
  #  Get environment variables from .env file and run test
  - if [[ $TEST_TARGET == 'server' ]]; then
       export $(egrep -v "^\s*(#|$)" ./app/sandbox/ts-sqlite.env);
       ./tests/test_server.sh;
    fi

after_success:
  -  # -------------DEFAULT--------------------
  - if [[ $TEST_TARGET == 'default' ]]; then
          pip install python-coveralls;
          coveralls;
    fi
